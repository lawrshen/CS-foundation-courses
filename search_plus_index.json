{"./":{"url":"./","title":"Introduction","keywords":"","body":"Introduction 本文档使用 Gitbook 制作，主要内容包括计科相关的基础性课程（基本为大学必修课），Github 仓库地址，欢迎 Fork 。 所有引用内容版权归原作者所有。 "},"OperatingSystem/":{"url":"OperatingSystem/","title":"操作系统","keywords":"","body":"操作系统 "},"OperatingSystem/概论.html":{"url":"OperatingSystem/概论.html","title":"概论","keywords":"","body":" OS地位 基本原理、概念、方法和技术 OS工作的整体过程 主要算法和功能模块 操作系统概论 OS概念、地位、功能与 目标 什么是计算机系统 硬件、OS、应用程序（包括了系统程序）和用户 扩展了硬件的能力，协调管理者的功能 资源管理 主要讨论 os kernel 拓展机 抽象与虚拟 设备：文件 存储：虚拟存储 处理器：进程 虚拟：独占资源 资源管理者：服用与保护 复用（共享）：时分复用，空分复用 保护：防止应用程序相互干扰 OS特殊地位由硬件保证。 功能目标 功能： 资源管理（处理器管理、存储管理、设备管理、文件管理（软件）） 控制执行（进程调度，并发进程控制） 提供接口（作业管理）（非核心功能） 目标： 方便用户使用，提高机器能力，提高运行效率，提供开放环境 主要特征 并发性，共享性，异步性，虚拟性（管理资源实现手法） 硬件的并行能力是并发的保障。 运行机制概览 ** 计算机引导过程:个人PC机 加电之后的启动： BIOS是硬件产商提供的软件，可选的boot loader，到此都是实模式，不区分用户态和核心态，kernel变成保护模式，（状态向量表填满.etc)，用户程序代码运行在用户态，init进程号一般是PID1. 操作系统初始化到用户进程执行 init(PID1)--(fork)-->init--(exec)-->getty：硬件终端初始化 --(exec)--> （用户面对）login--(exec)-->sh--(fork)-->sh--(exec)-->grep(用户命令) 操作系统基本形态 boot loader将os kernel加载到内存，再jmp到os kernel开始处。os kernel将1.实模式变成保护模式，2.填充中断向量表。3.时钟中断机制设置（定时器 外设） 定时器 保证能在可预期的时间内运行，比如说，一个进程的时间片用完了执行调度。 用户态主动呼唤OS，比如说I/O操作，x86下的int指令。 现代操作系统：中断驱动。（用户态回来执行OS代码主要靠硬件（的中断机制）回到kernel运行。 (中断程序后续)调度程序 等待队列的程序哪个接下来执行 OS主导地位 OS代码获得主导地位是因为OS代码是第一个执行的代码（被boot loader加载的），有CPU硬件机制保障。 用户代码执行与切换 用户代码有限直接执行(Limited Direct Execution) ret：栈在哪边哪边pop int：产生某种类型中断的一种指令 中断（广义）与 iret 发展与分类 随硬件发展而发展，OS促使硬件发展。 OS提供的服务与接口（lab2 系统调用 ** OS结构 * 微内核 与 宏内核结构 典型OS介绍 "},"OperatingSystem/处理器管理.html":{"url":"OperatingSystem/处理器管理.html","title":"处理器管理","keywords":"","body":"什么是处理器管理？ 管理、调度和分派 处理器，控制程序执行 资源分配；进程调度 进程：资源分配和管理的单位；线程：处理器调度的单位 处理器的相关知识 regs，user and kernel PSW：一组值 哪个程序的PSW在CPU上，CPU正在跑哪个程序。 中断发生将PSW保存到栈上。（这部分不是软件做的 Sp指向的就是栈（一个内存空间 中断技术 中断：向CPU报告设备已经完成某某操作。并法基础 优先级；中断屏蔽；快中断慢中断；delay 进程与线程 用户空间实现线程：eg POSIX 可移植，但一个阻塞整个进程阻塞。 进程上下文 处理器状态转换 stateDiagram 用户态 --> 内核态 内核态 --> 用户态 此时仍在同一个进程中运行。 处理器调度 考虑的主要因素： 资源利用率CPU有效工作时间/CPU总运行时间 吞吐率：单位时间内处理的作业数 公平性：确保每个用户，每个进程获得合理的CPU份额或其他资源份额，不会出现“饿死”现象 响应时间（分时系统、实时系统）：从作业提交到收到回应的时间 周转时间（批处理系统）：作业提交开始到作业完成的时间 平均周转时间（t完成时间 - t到达时间）求和/ n、平均带权周转时间（权值=t周转时间/t所需运行时间） 作业管理与调度 等待时间：从job到达一直到被完全开始调度执行的时间 周转时间：从job到达一直到被完全调度执行结束的时间（等待时间+处理时间） aging：$𝑇_{n+1}=𝑎\\; t_n+(1−𝑎)𝑇_n$；$T_1=t_1$ 低级调度 什么是实时系统？ –时间因素非常关键的系统，强调响应时间 ∑i=1mCiPi≤1\r \\sum_{i=1}^{m}\\frac{C_{i}}{P_{i}}\\leq 1\r ∑​i=1​m​​​P​i​​​​C​i​​​​≤1 其中m为事件总数，Ci为某个事件的处理时间，Pi为事件发生的周期 "},"OperatingSystem/并发进程.html":{"url":"OperatingSystem/并发进程.html","title":"并发进程","keywords":"","body":"概述 无关的并发进程判断：Bernstein条件 R(pi) read,W(pi) write ;两个进程满足：(R(P1)∩W(P2)) ∪ (R(P2) ∩W(P1)) ∪ (W(P1) ∩W(P2)) = { } 临界区管理 软件实现：Peterson算法 ：互相谦让 用 inside[2] 和 turn标志 硬件实现：关中断，xchg 存在问题：ljq 同步问题 生产者消费者问题 信号量 p：请求资源，v：分配资源 读者写者问题 56 - 59 二元信号量实现一般信号量 60 - 62 理发师问题 63 - 64 管程 同步逻辑的封装机制 进程间通信： 信号 管道 消息队列 共享内存 套接字 （线程几乎不存在交换数据问题） 硬中断（内，外 中断） 中断正在执行的程序，转向中断处理程序（外部设备对CPU终端，指令不正常） 信号是 一种 软中断，内核或进程向某个进程发出中断。 死锁 P_i need alloc available (clain = need + alloc) 银行家算法：死锁避免 资源分配图：死锁检测 进程和资源间申请及分配关系 の 有向图 申请边，例 Pi→Rj；分配边，例 Ri→Pj 如果每个资源类型只有一个实例，那么资源分配图中出现环则意味着出现死锁 环：必要不充分，死锁一定有环有环不一定死锁 "},"OperatingSystem/存储管理.html":{"url":"OperatingSystem/存储管理.html","title":"存储管理","keywords":"","body":"存储管理概述 存储器介绍 地址转换与保护 对主存储器用户区域和辅存储器 管理 地址转换（逻辑地址→物理地址） 程序编译链接装载 存储保护 连续存储空间管理 分页式存储管理 页表是操作系统 为进程创建的，是程序页面和内存页框的对照表，页表每一栏指明程序中的一个页面和分得页框之间的对应关系。 页面号 --（页表）--> 页框号 内存放 页表 ；+ 专门的 页基址寄存器只有一个，占用CPU进程才占有它（当前进程 页表其实地址） 分段式存储管理 虚拟存储管理 请求式分页 请求分页虚存管理目标是找出满足当前进程访问局部性所需要的页面。然后把对应页面加载到内存中 "},"OperatingSystem/设备管理.html":{"url":"OperatingSystem/设备管理.html","title":"设备管理","keywords":"","body":"I/O 控制方式 询问方式 中断方式 DMA方式 通道方式 I/O软件层次 "},"OperatingSystem/文件管理.html":{"url":"OperatingSystem/文件管理.html","title":"文件管理","keywords":"","body":"FileSystem{filemanage:syscall;mode_setdirmanage:grep fd;modifydirdiskmanage:logic−>physical\r File System\t\\begin{cases}\r file manage:&syscall; mode \\_set\\\\\r dir manage:&grep\\ fd; modify dir\\\\\r disk manage:& logic -> physical\r \\end{cases}\r FileSystem​⎩​⎪​⎨​⎪​⎧​​​filemanage:​dirmanage:​diskmanage:​​​syscall;mode_set​grep fd;modifydir​logic−>physical​​ 概念 文件系统主要做了 逻辑文件 --> 物理文件； 文件名 到 磁盘存贮 文件的按名存取（基本功能） 文件目录的建立和维护（用于实现上述基本功能） 实现逻辑文件到物理文件的转换（核心内容） 文件存储空间的分配和管理 数据保密、保护和共享 提供一组用户使用的操作 存取方法：顺序：磁带；直接：磁盘；索引：多级索引。 文件目录：文件清单；目录也以文件形式处理，目录文件 静态结构 超级块：通常占用1#号块索引节点区：通常位置，2#～k+1#块 数据区：通常位置紧随索引节点区 动态结构 进程打开文件表 系统打开文件表 内存活动inode表 "},"Network/":{"url":"Network/","title":"计算机网络","keywords":"","body":"一、绪论 Internet基本概念 什么是Internet，组成、服务、协议 网络边缘、网络接入（家庭、公司、无线）、网络核心 电路交换：预留资源 分组交换：存储转发，efficient 虚电路：combine eg. more efficient：slide 51 0.1 active 10Mbps 1Mbps：35个用户中10个用户同时活跃的概率 1−Σn=010(35n)0.1n(1−0.1)35−n≥0.04%1-\\Sigma_{n=0}^{10} \\tbinom{35}{n} 0.1^{n} (1-0.1)^{35-n} \\geq 0.04\\%1−Σ​n=0​10​​(​n​35​​)0.1​n​​(1−0.1)​35−n​​≥0.04% 协议体系结构 多层协议体系结构的必要性 OSI与TCP/IP模型 各层名称、层次之间的关系，以及各层对应功能 两种不同模型的层次之间的对应关系 +----------------------------------+ | Application layer 应用层 | （表示层 会话层） +----------------------------------+ | Transport layer 传输层 | +----------------------------------+ | Network layer 网络层 | +----------------------------------+ | Link layer 链路层 | +----------------------------------+ | Physical layer 物理层 | +----------------------------------+ 网络性能分析 指标：网络时延、丢包、吞吐量概念 四种时延：处理、排队、传输、传播 传输(Transmission delay)：push all the bits of a packet into a link ​ Packet size / Transmission rate of the link(bps) 传播(Propagation)：one end to another ​ Link length / Propagation speed of link(3*10^8 m/s) 排队：len(queue) = Average rate * Waiting time 处理：微不足道的 Negligible 吞吐量：瓶颈线路，一般考察大文件 单传 在任何时间的瞬时吞吐量（instantaneous throughput）是主机接收到一个文件的速率（bps）。如果文件由 F比特组成，主机接收到所有比特用去 TTT 秒，则文件传送的平均吞吐量（average throughput）是 F/TF/TF/T bps。 二、链路层 链路层服务：分帧（检错码，流控（optional）），媒介访问控制（p2p,广播）鸡尾酒 成帧 ：begin：0111 1110；end：0111 1111.中间如果有连续五个1插0 局域网： 局域网的构成：拓扑结构、传输媒介 网桥 网桥的作用和工作原理 局域网互联； 工作原理：对收到的帧根据其 MAC 帧的目的地址 进行转发和过滤（网桥根据MAC地址转发，路由器根据网络地址如 IP 地址转发） 路由机制：转发表、地址学习、生成树算法、路由发现机制 地址学习 交换机表初始为空 每个接口接收到的每一个入帧，在交换机表中存储： 该帧源地址字段中的 MAC 地址 该帧到达的接口 当前时间 如果老化期过后，交换机没有接收到以该地址作为源地址的帧，就在表中删除这个地址 生成树算法 Message(Y，d，X)：from X,root Y 二三层交换机，基本工作机理 比较：Bridge, hub, Layer 2 Switch, Layer 3 Switch, Router Bridge 网桥：连接 LANs（局域网）：转发 地址自学习 ，共享媒介 Hub 集线器：Repeater ，物理上是星形的，逻辑上是总线型的 ，每一个传输会占用所有带宽，所有其他站点都会收到；如果两个同时传就会发生碰撞； Layer 2 Switch ：连接主机或 LAN s ：网桥的功能 （链路层的装置、透明、即插即用、自学习） 无碰撞。 Layer 3 Switch ：使用到路由器功能的 Switch （交换机 ），填充了 packet forwarding的功能，在 局域网上工作 Router ：路由器，在公网或者局域网都能工作 令牌环：基本工作原理 以太网： 媒体接入控制：CSMA的基本思想 listen before transmit CSMA/CD的工作原理 冲突检测的方式（2-2-29） ◆ 步骤 1 ：如果媒介空闲，传输；否则前往步骤 2 ◆ 步骤 2 ：如果忙，等待空闲，然后立即传输 ◆ 步骤 3 ：如果遇到碰撞，发送 jam 信号（6个字节全1的信号），中止 ◆ 步骤 4 ：发送完 jam 信号以后等待一个随机时间量，然后返回步骤 2 冲突检测与传播/传输时延的关系 二进制指数退避算法： K * 512比特时间 K [0,...,2^n-1] (n 最小帧长和最大范围 Ttransmission>2×Tpropagationsize≥2∗L∗B/v T_{transmission}>2 \\times T_{propagation} \\; size \\ge 2*L*B/v T​transmission​​>2×T​propagation​​size≥2∗L∗B/v IEEE 802.3以太网规约 802.3 CSMA/CD 以太网媒介：connectionless and unreliable既无连接也不可靠 以太网帧格式: Preamble | DstAddress | SourceAddress | type | Data | CRC (7+1)byte | 6 | 6 | 2 | 46~1500 | 4 无线局域网 无线局域网的概念和应用 IEEE 802.11体系结构 基本概念 体系结构图 媒体接入控制 CSMA/CA 分布式协调功能 点协调功能 与以太网的 CSMA/CD相比较 802.11b/g频段及传输速率 网络传输媒介利用率分析 媒介利用率 U=Ttransmissiontotaltime(Ttransmission+Tpropagation) U= \\frac{T_{transmission}}{total time(T_{transmission}+T_{propagation})} U=​totaltime(T​transmission​​+T​propagation​​)​​T​transmission​​​​ 定义： 1 ：一般化的帧传输时间 a ：端到端的传播时延 N ：站点的个数 Point-to-point link：1/(1+a) ALOHA, Slotted ALOHA：1/2e；1/e 令牌环：1/（1+𝑎/𝑁）,𝑎1 CSMA/CD（ p-persistent ）的简单性能模型：1/1+4.44𝑎 三、网络层 交换/路由，转发，建立连接（虚电路） 网络层向传输层提供主机到主机服务，传输层向应用层提供进程到进程服务 分组交换网络，基本思想 分组交换网络中路由 性能评估指标 路由信息的更新方式 路由算法 路由：效率，弹性，稳定 集中式路由 分布式路由：洪泛，随机行走，自适应路由//动态路由策略与算法 最小代价路由算法及其性能分析 Bellman-Ford（分布式、局部信息） Dijkstra Algorithm（集中式、全局信息） 第一、二、三代互联网路由算法之间的对比和改进 链路代价的计算：决策消耗；信息来源消耗 2 Least Cost Algorithms ** slides 20 ~ Dijkstra’sAlgorithm （slides 22 ~ 29）：贪心，每次选未加入点中路由代价最小的，然后更新。 可能存在 震荡 问题：zh_CN 247 拥塞敏感，由于链路开销和流量有关，流量不同向时会变化，解决方法有：不同时执行算法。 Bellman-Ford Algorithm （slides30 ~ 36）：拉周围节点更新最短路，开销变小好更新，开销变大会出现routing loop无穷计数。毒性逆转只能解决2两个节点的问题。 Link cost changes：good news fast ， bad news slow （slides37 ~ 38） difference （slides39 ~ 41） 分类 自治系统与路由方式 IRP(IGP) 与 ERP（EGP）概念 内部路由协议 距离向量协议（RIP）与链路状态协议（OSPF） 路由结构图与路由表的生成 BGP BGP的功能 基本报文类型和工作方式 IP协议 IP基本原理 异构网络环境下，internet协议的工作过程 协议 协议基本原语与相关参数 IPv4首部格式（各字段含义和变化） IP地址的分类法 A、B、C、D类划分标准和地址范围 A 0 开始，范围 1 .x.x.x 到 126.x.x.x ，划分是 1 位， 7 位， 24 位 B 10 开始，范围 128.0.x.x 到 191.255.x.x ，划分是 2 位， 14 位， 16 位 65534 C 110 开始，范围 192.0.0.x 到 223.255.255.x ，划分是 3 位， 21 位， 8 位 254 D 1110 开始，代表组播地址 子网划分/聚集 CIDR表达（如12.253.96.0/18）classless interdomain routing IPv6，和IPv4的异同，优缺点 dual-stack 双栈：IPv6/IPv4 节点，都能收发，遗失了部分IPv6特性，比如说flow label field tunneling 建隧道：两台IPv6间的IPv4路由器集合称为 隧道。IPv6整个作为IPv4的payload IP protocol suits NAT原理及优缺点 3 Types： static（1-> 1) dynamic (many --> some) (ip池) single-Address (many --> 1)端口号 NAT table [ip:port]映射 NAT影响P2P连接，P23：It is not possible to devise such a technique. In order to establish a direct TCP connection between Arnold and Bernard, either Arnold or Bob must initiate a connection to the other. But the NATs covering Arnold and Bob drop SYN packets arriving from the WAN side. Thus neither Arnold nor Bob can initiate a TCP connection to the other if they are both behind NATs. ARP地址解析原理和流程 为在同一个子网上的主机和路由器接口解析IP地址。 维护ARP表(有ttl)，根据IP地址查Mac地址。广播帧（ARP request） DHCP动态地址获取的过程 DHCP获取：自己的IP地址，子网掩码，本地DNS服务器的IP地址，第一跳默认网关的IP地址 4 step : get yiaddr（your internet address) DHCP-discover（broadcast）； DHCP-offer（each server）； DHCP-request（choose one server（broadcast）)； DHCP-ack(selected server)；host set config with ack ... DHCP-release ICMP：用于发送出错信息，Ping和traceroute的实现原理 ping ：- test dest reachable（echo requestICMP type 8 code 0 message/echo replyICMP type 0 code 0 message） traceroute：跟踪 一个主机 到另一个主机 的路由 mobile IP：处理移动设备IP地址问题（TCP连接需要固定的destIP)，一个移动实体在移动过程中保持IP地址不变，从应用角度，移动性就变得不可见。 foreign agent作用之一是为 mobile node 初建一个转接地址（COA Care-Of Address） 移动节点得到COA： 归属代理：mobile node告知 归属代理 （home agent）位置 Discovery mobile agent：ICMP 告知存在 mobile node Registration mobile node：得到COA,让home agent转发packet过来 mobile froeign agent home agent （request/reply） Tunneling IP组播（Multicast） 两个问题：如何识别，如何分发 这个单一标识符。在因特网中，这种表示一组接收方的单一标识就是个D 类多播地址。 与一个D类地址相关联的接收方小组被称为一个 多播组(multicast group)。 组播地址、组播模型、组播组管理：IGMP 组播地址：D 类 IPv4 地址， 224 开头及往上；组播 组播mac地址的高24bit为0x01005e，mac 地址的低23bit为组播ip地址的低23bit。 组播模型：主机将 IP 数据报 编址 到 一个 多播组， 路由器 将多播数据报转发给已加入该组播组的主机。 IP多播路由器：复制一份（拥有多播功能的路由器），多播responsibilities有(10)有一个守护进程 组播组管理：IGMP，host通过ICMP加入多播组不包括发送端，或从中删除 组播路由机制：find a spanning tree Shared-tree, Source-based tree 四、传输层 传输层服务： 编址、复用、流控制、面向连接、可靠传输 复用：收集不同应用的数据发给网络层 可靠传输协议的设计 数据包损坏：校验和，ACK，NAK信号 ACK有问题就再发一次packet（有seq兜底） 数据包丢失：超时计时器 按序交付、副本检测：以序列号区分，要求序列号空间足够大 传输效率：流水线协议 solutions Checksums (to detect bit errors) Timers (to detect loss) Acknowledgements (positive or negative) Sequence numbers (to deal with duplicates) 流水线协议 Which packets can sender send? Sliding window How does receiver ack packets? Cumulative Selective Which packets does sender resend? Go-Back N (GBN) Selective Repeat (SR) UDP接收时只负责接收，不用区分发送方（因为UDP协议是无连接的）故使用二元组(目的IP+ 目的端口)；而TCP接收时需要区分发送方(TCP协议是连接的),故四元组(源IP + 源端口 + 目的IP + 目的地址) 传输层协议：UDP，TCP UDP协议 无连接、非可靠 TCP协议 基本服务 协议首部格式 sequence：TCP 字节流 所以要 seq number；序号是建立在字节序列上而不是传送报文段的序列上。 ack：host A期待从host B收到的下一个字节序列。 TCP 仅为传输一次的报文段测量SampleRTT 。无法区分是重传的ACK还是原来的ACK,有二义性【P33】 流量控制 4-3 滑动窗口机制的设计；发送端[unack ...]；接收端[expect ...]; [有个二义性问题：接受方可以不发ack实现流控，但是发送方无法确认是丢包还是流控] 信用量窗口 rwnd = buffer size - [已占用大小 recv - read ] TCP复合的窗口管理方式 基于接收方缓冲区 基本机制和工作流程 可能有 接收端在发过W=0后再次打开W=j的包丢失，死锁情况。 连接维护 连接建立：三次握手 可靠网络与不可靠网络下连接建立与终止的算法对比 三次握手的流程图与其必要性 随机化seq：防止古老的seq到达。 三方握手：确认对方的SYN和序号 SYN/ACK丢包了只能等超时重传，因为SYN/ACK是后面测出RTT(round trip time)的基础，所以这边超时只能根据经验。 连接终止：四次挥手 拥塞控制算法 IP网络拥塞。端系统发现网络拥塞并处理。（拥塞控制是一个资源分配问题） 发送速率 cwnd/RTT 时延RTT估计算法 EstimateRTT=(1−α)∗EstimatedRTT+α∗SampleRTT\\text{EstimateRTT} = \\left( 1 - \\alpha \\right)*\\text{EstimatedRTT} + \\alpha*\\text{SampleRTT}EstimateRTT=(1−α)∗EstimatedRTT+α∗SampleRTT DevRTT=(1−β)∗DevRTT+β∗∣SampleRTT−EstimatedRTT∣\\text{DevRTT} = \\left( 1 - \\beta \\right)*\\text{DevRTT} + \\beta*\\left| \\text{SampleRTT} - \\text{EstimatedRTT} \\right|DevRTT=(1−β)∗DevRTT+β∗∣SampleRTT−EstimatedRTT∣ RTO计时器管理算法RTO(k+1)=Min(UBOUND,MAX(LBOUND,β∗SRTT(k+1))))\\text{RTO}\\left( k + 1 \\right) = \\text{Min}(\\text{UBOUND},\\text{MAX}\\left( \\text{LBOUND},\\beta*\\text{SRT}T\\left( k + 1 \\right)) \\right))RTO(k+1)=Min(UBOUND,MAX(LBOUND,β∗SRTT(k+1)))) Jacobson’s Reno 毙掉的方案：不管，资源预留，竞价（不公平） 慢启动（Linear increase per ACK(CWND+1)==-->== exponential increase per RTT (2*CWND) ） cwnd(Congestion Window)的值设置为1个MSS(maximum segment size)的较小值 cwnd的值以1个MSS开始，每当传输的报文段首次被确认就增加1个MSS（事实上是在翻倍） 何时结束 存在一个由超时指示的丢包（即拥塞） 将ssthresh（慢启动阈值）设置为cwnd/2 将cwnd设置为1并重新开始慢启动 cwnd的值等于ssthresh时 结束慢启动并进行拥塞避免模式 检测到3个冗余ACK 执行快速重传并进入快速回复状态 拥塞避免：窗口增长基本算法（AIMD） 此时cwnd的值大约时上次遇到拥塞时的一半 每个RTT只讲cwnd的值增加一个MSS 每个到达ACK增加MSS/cwnd字节的cwnd 何时结束 超时：与慢启动相同 3个冗余ACK 将ssthresh的值记录为cwnd的值的一半 cwnd的值减半 进入快速恢复状态 快重传 触发条件：TCP发送方接收到对相同数据的3个冗余ACK 说明这个已被确认过3次的报文段之后的报文段已经丢失 快恢复 cwnd设置为上一个阈值+1 进入拥塞避免状态 数据网络中的拥塞控制 拥塞问题 网络拥塞和性能指标 拥塞情况下网络吞吐率特征 拥塞控制方式 抑制分组（拥塞分组）control packet ==ICMP== generated at congested node send to source node 反压（逐跳）hop-by hop choke packet [长距离] 警告位 warning bit special bits set in the packet header by switch 取消了二义性 随机早期丢弃（RED） 公平队列：轮询，大小流互不干扰 五、网络安全 RSA算法 报文完整性：数字签名；端点鉴别【源自Alice，没有被篡改】 m, H(m+s) "},"Network/intro.html":{"url":"Network/intro.html","title":"intro","keywords":"","body":"Introduction of Networking Basic Concepts and Questions Internet is made of component: computing devices,communication links and rounters. service: communication infrastructure/services provided to Apps Protocols:network of networks connect to the Internet network edge ---access networks--- network core core: router switch (mainly forward) 无线路由器其实是被叫做无线AP，能力很有限，主要为了发送无线信号，不属于核心网络中的以转发为主要功能的路由器 Wireless Access Networks： local area network(LAN): Ethernet Wireless LANs（WiFi），Wider-area wireless access（3G,4G) Internet History Protocol Layers and Service Model Network Performance 网络性能指标 delay：source to destination 传输延迟 Transmission delay:bandwidth，报文大小/ 传播延迟 Propagation delay:导线传播时间 网络中心节点有关（动态相关 Loss Throughput 吞吐量 在任何时间的瞬时吞吐量（instantaneous throughput）是主机接收到一个文件的速率（bps）。如果文件由 F比特组成，主机接收到所有比特用去$T$秒，则文件传送的平均吞吐量（average throughput）是 $F/T$ bps。 没有其他干扰流量时，其吞吐量近似为沿着源和目的地之间路径的最小传输效率。 "},"Network/level2 link layer.html":{"url":"Network/level2 link layer.html","title":"level2 link layer","keywords":"","body":"lesson 1 链路层服务 1.成帧(9)；2.链路接入(10-12)；3.可靠性传输(13-18)；4.错误校验和纠错(奇偶，checksum(16bits求和的反码作为校验码，全0不要校验码UDP 135) zn_ch 295，CRC) 3，4 layer 流控 错误检测：奇偶校验，CRC的计算 格式为 +-——————-——+----------+ | 数据 D | 校验码 R | +-——————-——+----------+ d+r 位，R 冗余校验码，判断标准是 D,R 整除 G Since $𝐷∗2^𝑟$=𝑎∗𝐺⊕𝑅, so $𝐷∗2^𝑟⊕𝑅$=𝑎∗𝐺 Obtain R by: R=remainder[D⋅2rG]\r R=remainder[\\frac{D\\cdot 2^r}{G}]\r R=remainder[​G​​D⋅2​r​​​​] 被发送的数据： $D\\cdot 2^r\\; \\text{XOR} \\;R$ d+r 比特 (D G -->R,G是生成多项式) 流控制：Stop and Wait，Sliding Window flow control : reliable delivery Sliding Window : GBN (go back n)硬件实现简单，selective reject 局域网 LAN 令牌环 以太网 Ethernet: unreliable, connectionless 以太网帧格式 Preamble | DstAddress | SourceAddress | type | Data | CRC (7+1)byte | 6 | 6 | 2 | 46~1500 | 4 前同步码 lesson 2 Multiple access control 多路访问问题（multiple access problem）：如何协调多个发送和接收节点对一个共享广播信道的访问？ 多路访问协议（multiple access protocol）：节点通过这些协议来规范它们在共享的广播信道上的传输行为。 碰撞（collide）：多个节点同时传输帧，所有节点同时接到多个帧，没有一个节点能够有效的获得任何传输的帧。 理想情况下MAC所期待的四种特性： 单个节点具有全部吞吐量（R bps） 多个节点均分共享吞吐量（R/M bps) 协议是分布式的，没有特殊节点负责转发，没有同时的时钟和槽 简单 信道切分 时分；频分；码分 轮流访问 master；distributed 随机访问 CSMA (载波侦听多路访问) Carrier sense multiple access (载波侦听多路访问) Nonpersistent，1-persistent，p-persistent CSMA/CD原理，算法（IEEE 802.3，以太网） lesson 3 utilization ARP DHCP 随机访问接入的性能 ARP & DHCP DNS为Internet任何地方的host解析主机名，而ARP只为在同一个子网上的主机和路由器接口解析IP地址。 lesson 4 Bridge and Layer 2 Switch 概念 连接局域网LANs 选择性存储 转发 透明 即插即用 自学习 广播机制 广播风暴问题 拓扑有环 生成树算法 选root && 最短路（lower ID) Message(Y, d, X) Y: root ,d: distance to Y, X: node X 鲁棒性：节点（root和其他）的崩溃 root周期发报文，超时其他节点重新claim root 地址学习机制 减少广播的浪费，switch table存储来的节点address和端口port 二层交换机 记录传来的link，MAC address 更新switch table，entry for destination lesson 5 Wireless Networks Elements of a wireless network: wireless hosts, base station, wireless link 无线网络两种模式：与基站关联的主机：基础设施模式（Infrastructure mode), 和Ad-hoc mode（自组织 known） Wireless link characteristics： Decreased signal strength: Radio signal attenuates as it propagates through matter (path loss)：平方衰减：频率越高，波长越小，衰减越快 Multipath propagation: Radio signal reflects off objects ground, arriving ad destination at slightly different times Interference from other sources: Standardized wireless network frequencies (e.g., 2.4 GHz) shared by other devices (e.g., phone); devices (motors) interfere as well：其他干扰 WiFi 802.11: 802.11架构：AP BSS -- DS -- ESS --（portal）--> LAN association slides 28 - zh_CN 367；us_en 594 信道划分，multiple access： Hidden terminal 终端隐藏； Signal fading 信号衰弱； Exposed terminal problem 暴露终端问题，信号损失 802.11的MAC协议：CSMA/CA，不同于CSMA/CD ，无线不好做碰撞检测，使用了碰撞避免（collision avoidance）slides 41 ；zh_CN 368；us_en 595 liink-layer ack: RTS CTS zh_CN 370 链路层确认 4个帧交互，浪费带宽先做一次交换 三种优先级slides 802.11 frame 主要区别是4个mac地址，第四个是ad-hoc mode，前三个： 接收帧的地址 发送帧的设备（host 或者AP） 连接到其它网络的路由器端口 IEEE 802.11数据帧有四种子类型，分别是IBSS、From AP、To AP、WDS。这里的数据帧F是从笔记本电脑发送往访问接入点（AP），所以属于To AP子类型。这种帧地址1是RA（BSSID），地址2是SA，地址3是DA。RA是receiver address的缩写，BSSID是basic service set identifier的缩写，SA是source address的缩写，DA是destination address的缩写。因此地址1是AP的MAC，地址2是H的MAC，地址3是R的MAC， 试题。 AP到router，最后一跳，有线网扩展到无线网。 advanced slides 50 ；zh_CN 374；us_en 605 rate adaptation；power management(省电) "},"Network/level3 network layer.html":{"url":"Network/level3 network layer.html","title":"level3 network layer","keywords":"","body":"网络层 Network  layer{IP  protocolrouting  protocolICMP(Internet Control Message Protocol)\r Network\\ \\ layer\\begin{cases}\r IP \\ \\ protocol&\r \\\\\\\\\r routing \\ \\ protocol&\\\\\\\\ \r ICMP (Internet \\ Control\\ Message\\ Protocol)&\r \\end{cases}\r Network  layer​⎩​⎪​⎪​⎪​⎪​⎪​⎪​⎨​⎪​⎪​⎪​⎪​⎪​⎪​⎧​​​IP  protocol​​routing  protocol​​ICMP(Internet Control Message Protocol)​​​​​​​ CH-3 slides51 Summary of Header Changes (IPv4 --> IPv6) lesson 1 网络层功能 router VC数据报网络 Intro slides 4 ~ 7 （2 functions） ①交换/路由；②转发 路由决定了转发表 slides 8 ~ 11 （连接建立 网络服务模型） IP Routers slides 13 ~ 17 router capacity = N(ports) * R(link rate[speed]) router 路由器的构成 ：①跑路由算法；②转发 slides 18 ~ 28 (Input Port) 找端口号用前缀匹配；主要挑战是处理速度（更新表头） slides 29 ~ 34 (Output Port) ①packet 分组；②buffer 管理；③调度 slides 35 ~ 39 (Connecting inputs to outputs) shared memory；bus；inter-connection network Virtual Circuit and Datagram Networks lesson 2 IP协议 地址 Intro slides 3 ~ 5 Internet Addressing slides 7 ~ 10 编址规则 addressing conventions address level：二层地址，三层地址（全球可达），五层地址（区分应用） IP Operations slides 12 ~ 18 Routing：主机和路由器维护路由表 Datagram lifetime: ttl 保证不出现环路情况 Fragmentation and re-assembly：分片重组，router高速转发 Error control：ICMP Flow control IP Packet Structure slides 20 ~ 25 Dealing with Fragmentation slides 27 ~ 36 IP Address slides 38 ~ 53 en P338: an IP address is technically associated with an interfaceint ch P225: IP 要求每台主机 和 路由器接口拥有自己的 IP 地址。 int. The boundary between the host and the physical link is called an interface. ↩ IP地址【全球唯一】 Network part (high order bits)：全0和全1的地址要扣除，全0是网络号，全1是广播号 lesson 3 NAT ICMP NAT slides 3 ~ 8 network address translation 3 Types： static（1-> 1) dynamic (many --> some) (ip池) single-Address (many --> 1)端口号 实现方式： NAT table IP protocol suits ICMP slides 10 ~ 17 IP协议 主流程 ICMP控制问题：排错\\&管理 Mobile IP slides 19 ~ 25 The Protocol slides 26 ~ 34 Discovery：知道支持 Registration： Tunneling： IPv6 slides 36 ~ 54 RFC (Request For Comments) 快速处理IP 分组是处理的焦点 lesson 4 routing 路由，效率，弹性，稳定 集中式路由 分布式路由：洪泛，随机行走，自适应路由 最小代价路由算法及其性能分析 DijkstraAlgorithm（集中式、全局信息） Bellman-Ford（分布式、局部信息） 链路代价的计算 Routing slides 4 ~ 9 Routing （slides 6 ~ 9） 性能指标：怎么定义 cost ；决策消耗；信息来源消耗 Routing Strategies （slides 10 ~ 19） 2 Least Cost Algorithms ** slides 20 ~ Dijkstra’sAlgorithm （slides 22 ~ 29）：贪心，每次选未加入点中路由代价最小的，然后更新。 可能存在 震荡 问题：zh_CN 247 拥塞敏感，由于链路开销和流量有关，流量不同向时会变化，解决方法有：不同时执行算法。 Bellman-Ford Algorithm （slides30 ~ 36）：拉周围节点更新最短路，开销变小好更新，开销变大会出现routing loop无穷计数。毒性逆转只能解决2两个节点的问题。 Link cost changes：good news fast ， bad news slow （slides37 ~ 38） difference （slides39 ~ 41） 分类 lesson 5 as routing 层次结构的routing，AS内部路由，AS间外部路由，分界处称为gateway，内外协议分别就是IGP(RIP,OSPF) 和EGP:(BGP) slides 13 ~ 15：第一代DistanceVector（局部）：毒性逆转 --> 第二代LinkState（全局） EGP：两个基础的路由选择算法都不够满足要求 RIP vs OSPF slides 21~ 24 zh_CN 258 en_US 384 路由选择信息协议 Routing InformationProtocol (RIP) slides 25~ 36 SPF（short path first) tree 最显著advanced ：OSPF Areas （35）层次式路由；其他诸如安全，多路使用，单播广播（33，zh_CN 261） slides 37 RIP vsOSPF BGP 域间路由 179tcp Border Gateway Protocol slides 39 ~ 44 : AS topo 反应了AS间的商业关系 slides 45~ 53：DV改进：目的地是子网前缀，不一定选最短路，path vector(避免环路) ，不保证可到达，聚合前缀路由 eBGP, iBGP, and IGP slides 55 ~ 60 BGP细节 speak BGP slide-56 slides 61 ~ 69 Basic messages in BGP，Specifies what messages to exchange with other BGP “speakers” slides 63 ~ 67 Route attributes lesson 6 IP multicasting Basic of IP Multicast slides 5 ~ 6 concepts；slides 7 ~ 9 IP Multicast slides 10 ~ 11 Multicast Router Responsibilities slides 13 IP Multicast Architecture slides 14 ~ 16 Service Model：主机host把 IP数据包发给一个多播分组，然后路由器再分发给多播分组（注意下地址转换） IGMP: Internet Group Management Protocol slides 18~19 IGMP：Host router 交换多播组的信息 slides 20 ~ 22 Operations；slides 23 ~ 25 IGMP Versions #TODO slides 26 ~ 34 Membership Query Multicast Routing slides 36 Multicast Routing 连接组成员的spanning tree，shared tree（全部一样）和 source tree（各个节点不同） Application-level Multicast slides 48 "},"Network/level4 transport layer.html":{"url":"Network/level4 transport layer.html","title":"level4 transport layer","keywords":"","body":"Transport layer basics 服务模型：提供逻辑通信，运行在端系统上。 多路复用和解复用 slides6 ； 14 Role of the transport layer slides 7 ~ 11 提供进程通信，可靠传输（optional） socket port slides13 ~ 14 主机host上每个套接字socket分配了一个端口号port，当报文段到达主机时，运输层检查报文段的目的端口号，并定向至对应的socket。 UDP & TCP UDP slides 4 ~ 10 7：Segment Format TCP slides 12 Retransmission timeout slides 34 TCP 流控 拥塞控制 flow control slides 4 ~ 18 TCP不足 router辅助 TCP congestion control wrap-up TCP throughput equation Problems with congestion control Router assisted congestion control slides "},"Network/level5 applications layer.html":{"url":"Network/level5 applications layer.html","title":"level5 applications layer","keywords":"","body":"lesson1 multmedia Streaming, storedaudio, video DASH streaming: can begin playout before downloading entire file stored (at server): can transmit faster than audio/video will be rendered (implies storing/buffering at client) e.g., YouTube, Netflix, Hulu Conversational voice/video over IP VoIP interactive nature of human-to-human conversation limits delay tolerance e.g., Skype Streaming live audio, video e.g., live sporting event (futbol) Real-time Transport Protocols: RTP/RTCP/RTSP/SIP RTP: 运行在UDP 之上，就是封装在UDP包中。 RTP不提供服务质量保证。RTCP来control QoS 区分不同的流量类型提供不同等级的服务。 此外，要防止饿死 速率的调节是一种重要的QoS机制。 lesson2 Internet Applications DNS HTTP CDN cache "},"Network/network securty.html":{"url":"Network/network securty.html","title":"network securty","keywords":"","body":"lesson 2 Authentication 0 - 14 : problem MAC Message Authentication Code m： 报文，s：共享秘密；H(m+s)：报文鉴别码MAC。发送拓展报文 H(m+s) CBC-MAC MD5 SHA-1 Digital Signature: MAC+Encription 私钥签署 Key Distribution Diffie-Hellman Key Exchange Trusted certification authority (CA) Certificate for public key 应用： 1.加密 2.真实性：私钥签名过 摘要 K−(H(m) )K^- (H(m)\\ )K​−​​(H(m) ) 3.三个钥匙，Alice的私钥签署 --> 生成一次性对称密钥-->Bob的公钥确保只有Bob能收。 "},"Algorithm/":{"url":"Algorithm/","title":"算法","keywords":"","body":"算法 "},"Algorithm/sort.html":{"url":"Algorithm/sort.html","title":"sort","keywords":"","body":"L5 HeapSort 堆排序优化：核心思想 元素下沉 上浮。 列递归解递归 笨展开 ~32.47） L6 - MergeSort 归并排序递归树 slides 14 ~ 16 算法下界 L6 决策树 ~ 最坏时间情况复杂度：决策树高度h ，叶节点数 $L \\leq 2^h$。 "},"Algorithm/adversary.html":{"url":"Algorithm/adversary.html","title":"adversary","keywords":"","body":"L 7 选择&对手论证 对手论证，一般用于给出问题的下界。若用PPP表示所讨论的问题，III表示问题的输入，AAA表示解决问题的基于比较运算的算法，T(A,I)T(\\,A,\\,I)T(A,I)表示对于输入III，算法AAA的计算时间复杂性，那么函数U(n)=min{max{T(A,I)}, for each I},for each AU(n)=min\\{max\\{T(A,\\,I)\\},\\text{ for each } I\\},\\text{for each } AU(n)=min{max{T(A,I)}, for each I},for each A表示问题PPP在输入大小为nnn时在最坏情况下的最好时间下界，它是问题所固有的。 对手论证的基本思想是对每一个AAA构造一个输入特殊的输入I′I'I​′​​，使T(A,I′)T(A,\\,I')T(A,I​′​​)尽量地大，然后在所有AAA的集合上，求T(A,I′)T(A,\\,I')T(A,I​′​​)的尽量小的下界作为f(n)f(n)f(n)。对手论证方法的关键在于有一套对于一切AAA的适用的构造符合要求的I′I'I​′​​的策略，即对手策略，逐步第构造出一个输入I′I'I​′​​，使算法AAA如果想达到预期的结果，要做尽量多次的比较和判断，从而使T(A,I′)T(A,\\,I')T(A,I​′​​)尽量大。需要注意的是，一方面对手策略需具有一致性，即不能前后矛盾，以保证I′I'I​′​​的存在性；另一方面对手策略还必须对一切AAA都适用，因为我们需要在一切AAA组成的集合上求T(A,I′)T(A,\\,I')T(A,I​′​​)得下界。 1. Find 2nd2^{nd}2​nd​​ Largest Number 我们知道，找到数组中元素的最大值，需要至少进行n−1n-1n−1次比较，那么找到第二大的呢？暴力算法就是在找一次最大呗，又是n−2n-2n−2次比较，总共是2n−32n-32n−3次比较。乍看起来也不错了，但是通过对手论证的分析，比较的总次数可以减少为n+⌈logn⌉−2n+\\lceil \\log n \\rceil -2n+⌈logn⌉−2次。How to？ 其实，所谓的第二大的元素，应该是在比较中仅仅输给了最大元素，也就是说，只有跟最大的那个元素比过的败者才有可能是。我们下面要说明的是，我们要找的第二大的元素应该是在那些跟最大元素比过的⌈logn⌉\\lceil \\log n \\rceil⌈logn⌉个元素中。 在对手论证中，我们每次都是选择两两配对，然后进行比较，这样的话，每次配对完后的比较，数据规模都缩减一半，也就是说，总共经过⌈logn⌉\\lceil \\log n \\rceil⌈logn⌉轮的比较，把这些输给最大数的元素拿出来，进行一次find-Max，开销是O(⌈logn⌉)O(\\lceil \\log n \\rceil)O(⌈logn⌉)就可以找到第二大的啦！！ 这里其实并不是严格的论证，只是证明了这个界是可以达到的，详细证明请参见这儿 2. Find Max and Min 这里也能够使用对手论证的方式得出其最少的比较次数为⌈32n⌉−2\\left\\lceil \\frac{3}{2}n \\right\\rceil - 2⌈​2​​3​​n⌉−2，具体的证明同样参见上述链接 下面，我们就来说说是怎么办到的吧，首先两两配对，共进行⌈12n⌉\\left\\lceil \\frac{1}{2}n \\right\\rceil⌈​2​​1​​n⌉次比较，将这里面的胜者和败者分别分为两组，再在两组内分别挑选Max和Min，代价是2×(⌈12n⌉−1)2\\times (\\left\\lceil \\frac{1}{2}n \\right\\rceil-1)2×(⌈​2​​1​​n⌉−1)，这样就可以得到Max和Min，总共的比较次数就是⌈32n⌉−2\\left\\lceil \\frac{3}{2}n \\right\\rceil - 2⌈​2​​3​​n⌉−2啦。 每一行上，从快到慢排序，不失一般性，小组第一的就是X1, X=A,B,C,D,EX1,\\ X=A,B,C,D,EX1, X=A,B,C,D,E，我们假设第六场比赛A1>B1>C1>D1>E1A1>B1>C1>D1>E1A1>B1>C1>D1>E1，>>>表示快的比较。那么A1A1A1一定是冠军！下面可能是第二、第三的只可能是A2,A3,B1,B2,C1A2,\\,A3,\\,B1,\\,B2,\\,C1A2,A3,B1,B2,C1这5个。为什么不可能是C2C2C2呢？因为C2C2C2至少输给了C1C1C1，而C1C1C1又至少输给了A1A1A1和B1B1B1，那么C2C2C2的最好成绩也不过是第四，其他的情况也是类似的分析。 所以在这第七场，遛一遛A2,A3,B1,B2,C1A2,\\,A3,\\,B1,\\,B2,\\,C1A2,A3,B1,B2,C1，就有第二、第三名产生了。 "},"Algorithm/graph.html":{"url":"Algorithm/graph.html","title":"graph","keywords":"","body":"L11 - L13 图遍历 DFS TE BE DE CE d-DFS ✔ ✔ ✔ ✔ u-DFS ✔ ✔ × × d-BFS ✔ ✔ × ✔ u-BFS ✔ × × ✔ u --> v：TE: white；BE：grey；DE,CE：black 有向图 topo --> 关键路径：利用DFS 尽头节点的性质。 dfs(v){ v.color = GRAY; for (auto& w: graph[v]) if(w.color == WHITE) dfs(w); v.color = BLACK; topo.push(v); } SCC：第一次dfs，节点遍历结束入栈（->black)，【总的来看栈中存储了一个一个强连通片，首节点是最后一个入栈的】，把图转置，出栈遍历一遍 无向图 割点（某一个没有BE)，桥（全部没有BE)k v.color = GRAY; time++; v.discovertime=v.back=time;//back larger for (auto& w: graph[v]){ if(w.color == WHITE){ dfs(w); if(w.back >= v.discovertime) output v as cut-point; v.back=min(v.back,w.back) if(w.back > v.discovertime) output v as bridge; } else if vw is BE: v.back = min(v.back,w.discovertime) } 没有桥 == 每一个点都有BE到根 L14 - L15 图优化 Prim: 随机选一个点（初始化一下，dis[start_v]=-inf）向外找fringe，挑最短的边加进来，迭代器是已经找到的点集（sub-MST)，加边是fringe。 T(n)=n∗extraMin+n∗insert+m∗delK\r T(n) = n* extra Min+n* insert+m* delK\r T(n)=n∗extraMin+n∗insert+m∗delK MST cut property --> 跨越Cut最轻的$\\in$MST -->谈论cut是只看最轻的,加上它可构造MST cycle property -->属于Cycle中最重的$\\notin$MST-->谈Cycle只看最重的，删去它可构造MS dijkstra min-max max-min(输油管道) u-->v：dp[v] = max[( ][]dp[v],min(dp[u],w) [)][] floyd 后继路由表，下一跳：GO[i][j]=GO[i][k] 前驱路由表，上一跳：FROM[i][j]=FROM[k][j] all-pair max-min: D[i][j]=max( min(D[i][k],D[k][j]), D[i][j] ) "},"Algorithm/dp.html":{"url":"Algorithm/dp.html","title":"dp","keywords":"","body":"L16 - L17 DP 什么是动态规划 聪明的安排解决子问题的顺序（只计算一次） 用动态规划解 subproblem goal make choice recurrence init time "},"Algorithm/npc.html":{"url":"Algorithm/npc.html","title":"npc","keywords":"","body":"L19 - L20 NPC Definition (The class NP) NP is the class of decision problems that are solvable in Polynomial time by Non-deterministic algorithm. NP≠Non−PolynomialNP≠NoProblem\r NP \\neq Non-Polynomial\\; NP \\neq No Problem\r NP≠Non−PolynomialNP≠NoProblem P 问题： 对于一个问题，如果存在解决问题的多项式时间代价的算法，那么该问题称为 P 问题。 NP 问题： 如果一个问题的解在多项式时间内可以验证，则称为 NP 问题。可验证的意思是：非确定性地猜测该问题的任意一个解，在多项式时间内能够检测这个解是不是该问题的解。 NP 难问题： 如果对于任意的 NP 问题 Q，Q 都能多项式时间归约到问题 P，则称 P 为 NP 难问题。 NPC 问题： 一个问题既是 NP 问题，又是 NP 难问题，则它被称为 NP 完全问题。 Definition (Non-deterministic polynomial algorithm.) Given an instance I of a decision problem: Guessing: generate a certificate c for $I$ Verifying: V( $I$ , c ) O(Guessing)+O(Verifying)=O(nc)\r O(Guessing) + O(Verifying) = O(n^c)\r O(Guessing)+O(Verifying)=O(n​c​​) eg. INDEPENDENT-SET $\\in$ NP Proof Given G= (V, E) and k: Guessing: Nondeterministically select a subset C of k vertices of G. Verifying: Test whether G contains no edges for all vertices pairs in c. Output: If the test passes, ouput \"yes' '; otherwise, output' no' . The complexity is O($n^2$). 已知，常用的NP问题B。B归约到C。 辨析 问题 1：归约的方向与 NPC 问题的证明 我一直感觉归约的方向有点反直觉。 或者说，我是因为看了教材上给的例子之后才觉得反直觉。 是这样一个例子（简化说明）： 划分问题：一个特殊问题 背包问题：一个一般问题 划分问题是背包问题的一个特例（或者说，把背包问题的某些参数确定后，就变成了划分问题）。 已知划分问题是 NPC 问题，证明背包问题也是 NPC 问题。 要证明一个问题 B 是 NPC 问题，做法就是： 证明问题 B 是一个 NP 问题。 按照定义证明即可 证明一个 NPC 问题 A 能够归约到问题 B（问题 A 的难度小于等于问题 B） 教材上说，把背包问题的某些参数确定后，就变成了划分问题，由此得到了「划分问题到背包问题的一个归约」。 看到这里我就有点懵了，我好像看不懂这中间的关系了，具体理清思路后是这样的： 1、A 问题归约到 B 问题，说明 A 问题的难度不高于 B 问题。 2、特殊问题比一般问题简单，所以特殊问题可以归约到一般问题。 3、这个问题里的归约是什么：是一般问题特殊化的过程。 我之前搞不懂，为什么「一般问题的特殊化」是一个「从特殊问题到一般问题的归约」？一直觉得这很反直觉，很矛盾。 后来才理解到，一般问题的特殊化的实质是：构造了一个从特殊问题的参数到一般问题参数的映射，这个映射正是从特殊到一般进行归约所需要的。 最后。 三色问题是四色问题的特例吗？是的。 所以三色问题其实比四色问题简单？对。 如何把三色问题归约到四色问题？把四色问题特殊化为三色问题即可。 问题 2：伪最大团与最大团问题的区别 伪最大团问题： 输入是图 G，有一个常数 k，问图 G 中是否存在大小为 k 的团？ 最大团问题： 输入是图 G 和参数 k，问图 G 中是否存在大小为 k 的团？ 这两个问题的区别在于，前者的 k 是常数，后者是参数（输入、变量）。 结论告诉我： 1、伪最大团问题是具有多项式时间的解法，因此是 P 问题。 2、最大团问题，暂时没有人找到多项式时间算法，所以只是 NP 问题。 我使用暴力算法： n 个顶点中任选 k 个顶点，并遍历这 k 个顶点可能形成的所有边，总的时间复杂度是 $C(n,k)*\\frac{k(k-1)}{2}$。 就是这个式子让我疑惑了。 我一看，左边组合数，分解后是阶乘，多项式，右边也是多项式。 诶？这不就是多项式时间吗？ 不仅这两个问题的解相同，我又看到了书上的定理「最大团优化问题在多项式时间可解，当且仅当最大团判定问题在多项式时间可解」，我居然证明出了这个被称为 NPC 问题的最大团优化问题是一个 P 问题？！ 理性让我知道自己肯定错了，这么简单的步骤还想破解世界难题？ 终于在与同学的一番讨论后我才明白错误的地方： 阶乘！ 我把 O(n!) 当成了多项式时间了！ 而后再看暴力算法时间复杂度的式子，左边组合数分解后是阶乘除以阶乘，化简得到的是 n^k。 这个式子，对于伪最大团问题来说，k 是常数，所以是多项式时间；但对于最大团问题来说，k 是输入，它的规模是 O(n)，所以这个式子其实是 O(n^n)，不是多项式时间。 由此这个问题的疑惑变解开了。 由此引出下一个问题： 问题 3：伪多项式时间 有些问题的输入很特殊，你能很明确的确定输入的规模：n 个顶点，n 个数字 之类的。对于这些问题，多项式时间复杂度很好确定。 但对于那些多个输入的问题，或者说输入是一张图，信息很多，变量也很多，那你如何确定一个关于这些变量的式子是不是多项式时间呢？ 比如，输入有 n、k，我给的式子是 O(nk)、O(n^k)、O(k^2+n^2)等等，由于第二个问题已经讨论过，所以这几个还是比较好回答的。 但如果是更复杂的输入，似乎教材中并未给出清晰明确的「多项式时间」的定义。 由此引出一个概念： 伪多项式时间。 如果一个问题的 input size（输入规模或输入大小）为 x，某个解决这个问题的算法的最坏时间复杂度为O(x^k)，其中 x^k 表示 x 的 k 次方，此处 k 为已知常数，那么这个算法可以成为多项式时间算法。 什么是 input size？ 这个问题所有输入用二进制表示下的位数。 经典的伪多项式时间的问题：背包问题、素数判定问题。 知乎上看到这样一个解释： 算法的时间复杂度是输入数据的多项式表达，但却是输入数据长度的指数时间表达。 举个例子， 一问题的输入是一个整数 n，这个整数 n 的大小没有限制，也就是说可能不只是32位、64位等。 解决这个问题的算法的时间复杂度假设为 O(n^3)。 这个问题的输入规模 x = logn（即 n 对应于二进制下的 bit 位数）。 由此得到时间复杂度为 O(2^{3x})，这是一个指数型的代价，则该算法的代价实际上伪多项式时间。 而对比数组排序问题，每个数都是整数， 每次增加一个数，只增加 32 比特，所以原输入规模 x = 32n， 这个问题的算法就是多项式时间的。 分析出来的区别：数据规模。 "},"GLOSSARY.html":{"url":"GLOSSARY.html","keywords":"","body":""}}